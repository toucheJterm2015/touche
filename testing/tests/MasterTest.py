# This is a file which should run each of the other tests in turn.
# It is currently in the /tests/admin/ folder instead of /tests/ because importing was not working nicely
# 
# 
# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re
from admin import *
from team import *
import config

class MasterTestTouche(unittest.TestCase):
    #these are all the functions that are auto-generated by Selenium which are common to all the exported tests.
    def setUp(self):
        self.driver = webdriver.PhantomJS("/usr/local/bin/phantomjs")
        self.driver.implicitly_wait(30)
        self.base_url = config.base_url#this will be changed after the contest creation to "http://localhost/~touche/Test_Contest"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)
        
    #this is the main function that I'm actually writing.
    #hopefully this is in a logical order: create the contest, ensure that the first login forces the user to change the password, then log in properly and make sure everything is there, occasionally visiting things out of order to make sure users are directed to the correct order.
    #looks at admin first, then team, then judge
    def test_master_test_touche(self):
        #setup and admin tests
        t = CreateContestTests.CreateContestTests(self.base_url)
        t.test_create_contest_tests()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        self.base_url = config.base_url + "Test_Contest"
        
        t = DataSetsAndProblemsTest.DataSetsAndProblemsTest(self.base_url)
        t.test_data_sets_and_problems()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = AdminLoginTest.AdminLoginTest(self.base_url)
        t.test_admin_login()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = SetupContestTest.SetupContestTest(self.base_url)
        t.test_setup_contest_test()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        #contest setup has so many functions that a comprehensive set of tests to make sure everything works has not been made yet.
        
        t = SetupProblemsTest.SetupProblemsTest(self.base_url)
        t.test_setup_problems_test()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = AddEditDeleteProblems.AddEditDeleteProblems(self.base_url)
        t.test_add_edit_delete_problems()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = DataSetsAndProblems.DataSetsAndProblems(self.base_url)
        t.test_data_sets_and_problems()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = SetupSiteTest.SetupSiteTest(self.base_url)
        t.test_setup_site_test()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = AddEditDeleteSites.AddEditDeleteSites(self.base_url)
        t.test_add_edit_delete_sites
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = SetupTeamsTest.SetupTeamsTest(self.base_url)
        t.test_setup_team_test()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = AddEditDeleteTeams.AddEditDeleteTeams(self.base_url)
        t.test_add_edit_delete_teams
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = SetupCategoriesTest.SetupCategoriesTest(self.base_url)
        t.test_setup_categories_test()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = SetupHeadersForbiddenTest.SetupHeadersForbiddenTest(self.base_url)
        t.test_setup_headers_forbidden()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        #there currently is no test which tries to add and remove words from the lists of standard headers or forbidden words.
        
        t = MiscTest.MiscTest(self.base_url)
        t.test_misc()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        #misc has so many functions that a comprehensive set of tests to make sure everything works has not been made yet.
        
        t = TestAndStart.TestAndStart(self.base_url)
        t.test_and_start()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        
        #judge and team tests get mixed together here unless they can be separated.
        t = clarifications.clarifications(self.base_url)
        t.test_clarifications()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
        t = ContestantSubmissionTests.ContestantSubmissionTests(self.base_url)
        t.test_contestant_submissions()
        try: t.tearDown()
        except AssertionError as e: self.verificationErrors.append(str(e))
        
#this is also common to all the auto-generated code.
if __name__ == "__main__":
    unittest.main()